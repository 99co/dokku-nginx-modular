#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

set -a #export all subsequently defined variables for template access
# Bash templating snippet from: http://stackoverflow.com/a/2916159/66771 
# NOTE: Template variables must be exported (done with set -a above) and placed
# in brackets (like ${...}) for the regex to process it.
shopt -s expand_aliases
alias process_template="perl -p -e 's/\\$\{([^}]+)\}/defined \$ENV{\$1} ? \$ENV{\$1} : \$&/eg'"

echo "-----> Deploying nginx..."
APP="$1"; PORT="$2"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #this directory
APP_PATH="$DOKKU_ROOT/$APP"
APP_CONTAINER="$DOKKU_ROOT/$APP/CONTAINER"
VHOST_PATH="$APP_PATH/VHOST"

# Get list of VHOST domains. This will be overridden below if SSL for some
# domains are enabled. If VHOST does not exist, set to empty string.
NONSSL_VHOSTS=`cat $VHOST_PATH 2>&- || echo ''`

# Load app config variables such that the template can access them like:
# ${MY_VAR}.
source $APP_PATH/ENV || true

# Remove old nginx.conf if exists
rm -f $APP_PATH/nginx.conf #need -f to supress error if non-existent file
rm -f $APP_PATH/nginx_upstream.conf 

PORTS=$(docker port `cat ${APP_CONTAINER}`)
if [[ ! -z $PORTS ]]; then
  echo "Ports"
  echo ${PORTS[@]}
  cat << CONF >> $APP_PATH/nginx_upstream.conf
upstream ${APP} {
CONF
  for i in $(echo ${PORTS[@]} | grep -oP ":\d{5}" | grep -oP "\d{5}"); do
    echo "Port ${i}"
    echo "    server 127.0.0.1:${i};" >> $APP_PATH/nginx_upstream.conf
  done
  echo "}" >> $APP_PATH/nginx_upstream.conf
fi

## Add once-off configuration options.  
#echo '-----> Configuring once-off options...'
#NGINX_ONCE_CONF="$DIR/nginx.once.conf"
#APP_NGINX_ONCE_TEMPLATE="$APP_PATH/nginx.once.tpl"
#if [[ -e $APP_NGINX_ONCE_TEMPLATE ]]; then
#  echo '-----> Overriding default nginx.once.conf with detected nginx.once.tpl'
#  NGINX_ONCE_CONF=$APP_NGINX_ONCE_TEMPLATE
#fi
#cat $NGINX_ONCE_CONF | process_template > $APP_PATH/nginx_upstream.conf

# Now handle non-SSL domains
NGINX_CONF="$DIR/nginx.conf" # default non-SSL conf file

# Ability to override default configuration files
# (If a nginx.tpl file exists in the $APP_PATH directory, use that instead.)
APP_NGINX_TEMPLATE="$APP_PATH/nginx.tpl"
if [[ -e $APP_NGINX_TEMPLATE ]]; then
  echo '-----> Overriding default nginx.conf with detected nginx.tpl'
  NGINX_CONF=$APP_NGINX_TEMPLATE
fi

if [[ ! -z "$NONSSL_VHOSTS" ]]; then
  # The VHOST file can contain more than one custom domain. We add each as a
  # single line to the server_name parameter of nginx instead of creating
  # separate server_name entries for each.
  echo $NONSSL_VHOSTS | xargs -i \
    echo "-----> Configuring {}..."
  # Combine all of the VHOST names into one line separated by at least a space.
  # Then trim leading and trailing whitespace (xargs). If VHOST file is blank,
  # xargs reduces any whitespace to a blank string.
  SERVER_NAME=`echo $NONSSL_VHOSTS | tr '\n' ' ' | xargs`
  cat $NGINX_CONF | process_template >> $APP_PATH/nginx.conf
fi

# CRUDE HACK: Since the `URL` file only expects one app url, we take the 
# first  `$NONSSL_VHOSTS` domain and write it to `URL`.
echo "http://$(echo $NONSSL_VHOSTS | head -n1)" > "$DOKKU_ROOT/$APP/URL"

echo "-----> Running nginx-pre-reload"
pluginhook nginx-pre-reload $APP $PORT
echo '-----> Reloading nginx...'
sudo /etc/init.d/nginx reload > /dev/null

cat #prints output from any plugins chained to this
